1.		INSERTION SORT:

#include<stdio.h>  
void main ()  
{  
    int i,j, k,temp;  
    int a[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};   
    printf("\nprinting sorted elements...\n");  
    for(k=1; k<10; k++)   
    {  
        temp = a[k];  
        j= k-1;  
        while(j>=0 && temp <= a[j])  
        {  
            a[j+1] = a[j];   
            j = j-1;  
        }  
        a[j+1] = temp;  
    }  
    for(i=0;i<10;i++)  
    {  
        printf("\n%d\n",a[i]);  
    }  
}  



2.		BUBBLE SORT:

#include<stdio.h>  
void main ()  
{  
    int i, j,temp;   
    int a[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};   
    for(i = 0; i<10; i++)  
    {  
        for(j = i+1; j<10; j++)  
        {  
            if(a[j] > a[i])  
            {  
                temp = a[i];  
                a[i] = a[j];  
                a[j] = temp;   
            }   
        }   
    }   
    printf("Printing Sorted Element List ...\n");  
    for(i = 0; i<10; i++)  
    {  
        printf("%d\n",a[i]);  
    }  
}  


3.		SELECTION SORT:

#include<stdio.h>  
void main ()  
{  
    int i,j, k,temp;  
    int a[10] = { 10, 9, 7, 101, 23, 44, 12, 78, 34, 23};   
    for(i=0;i<9;++i)
    {
        int pos=i;
        for(j=i+1;j<10;++j)
        {
            if(a[pos]>a[j])
            {
                pos=j;
            }

        }
        if(pos != i)
        {
            temp=a[i];
            a[i]=a[pos];
            a[pos]=temp;
        }
    }
    for(i=0;i<10;i++)  
    {  
        printf("%d \t",a[i]);  
    }  
}


4. 	BINARY SERACH (using recursion)

#include<stdio.h>
int main()
{
    int arr[10]={1,3,5,7,9,11,13,15,17,21};
    int ind=bin(arr,0,9,16);
    if(ind != -1)
    {
        printf("Number is found");
    }
    else
    {
        printf("The number is not found");
    }
    return 0;
}
int bin(int arr[], int start, int end, int num)
{
    if(start>end)
    {
        return -1;
    }
    else
    {
        int mid=(start+end)/2;
        if(arr[mid]==num)
        {
            return num;
        }
        else if(arr[mid]>num)
        {
            return bin(arr,start,mid-1,num);
        }
        else
        {
            return bin(arr, mid+1,end,num);
        }
    }
}


