Intersection of two Sorted Linked Lists


First linked list: 1->2->3->4->5
Second linked list be 2->3->4, 
Output: 2->3->4
The elements 2, 3, 4 are common in 
both the list so they appear in the 
intersection list.



#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    Node *next;
};

void push(Node **head_ref, int d)
{
    Node *temp=new Node();
    temp->data=d;
    temp->next=(*head_ref);
    (*head_ref)=temp;
}

Node *sortedIntersect(Node *a, Node *b)
{
    if(a==NULL || b==NULL)
        return NULL;
    
    if(a->data < b->data)
        return sortedIntersect(a->next, b);
    if(a->data > b->data)
        return sortedIntersect(a, b->next);
    

    Node *temp=new Node();
    temp->data = a->data;
    temp->next = sortedIntersect(a->next, b->next);
    return temp;
}

void display(Node *node)
{
    while(node != NULL)
    {
        cout<<node->data<<" ";
        node=node->next;
    }
}

int main()
{
    Node *a =NULL;
    Node *b=NULL;
    Node* intersect = NULL;
 
    /* Let us create the first sorted
      linked list to test the functions
     Created linked list will be
      1->2->3->4->5->6 */
    push(&a, 6);
    push(&a, 5);
    push(&a, 4);
    push(&a, 3);
    push(&a, 2);
    push(&a, 1);
 
    /* Let us create the second sorted linked list
     Created linked list will be 2->4->6->8 */
    push(&b, 8);
    push(&b, 6);
    push(&b, 4);
    push(&b, 2);
 
    /* Find the intersection two linked lists */
    intersect = sortedIntersect(a, b);
 
    cout << "Linked list containing common items of a & b :  ";
    display(intersect);
    
    return 0;
}