Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.





Solution :



class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& a) {
        
        int n = a.size();
        
        vector<set<char>> row(n);
        vector<set<char>> col(n);
        vector<set<char>> box(n);
        
        for(int i = 0 ; i < n ; i++){
            
            for(int j = 0 ; j < n ; j++){
                
                if(a[i][j] == '.')continue;
                
                int r = i/3;
                int c = j/3;
                
                if(row[i].count(a[i][j])||col[j].count(a[i][j])||box[3*r+c].count(a[i][j]))
                    return false;
                
                
                row[i].insert(a[i][j]);
                col[j].insert(a[i][j]);
                box[3*r+c].insert(a[i][j]);
                
            }
            
        }
        
        return true;
    }
};